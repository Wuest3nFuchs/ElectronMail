diff --git a/packages/metrics/lib/MetricsRequestService.ts b/packages/metrics/lib/MetricsRequestService.ts
index 0ca90fbfb8..1aa925bc32 100644
--- a/packages/metrics/lib/MetricsRequestService.ts
+++ b/packages/metrics/lib/MetricsRequestService.ts
@@ -67,67 +67,19 @@ class MetricsRequestService implements IMetricsRequestService {
         this._jailCount = 0;
     }

-    public startBatchingProcess() {
-        if (this._intervalId !== null || this._batch === undefined) {
-            return;
-        }
+    public startBatchingProcess() {}

-        // Very naÃ¯ve progressive backoff
-        const frequencyWithIncrementalBackoff = (this._jailCount + 1) * this._batch.frequency;
-
-        this._intervalId = setInterval(() => {
-            void this.processNextBatch();
-        }, frequencyWithIncrementalBackoff);
-    }
-
-    public stopBatchingProcess() {
-        if (this._intervalId === null) {
-            return;
-        }
-
-        clearInterval(this._intervalId);
-        this._intervalId = null;
-    }
+    public stopBatchingProcess() {}

     public async processAllRequests() {
-        if (this._requestQueue.length === 0) {
-            return;
-        }
-
-        const itemsToProcess = this._requestQueue;
-        this.clearQueue();
-
-        try {
-            await this.makeRequest(itemsToProcess);
-        } catch (error) {
-            this.resetBatchingProcess();
-        }
-    }
-
-    public clearQueue() {
-        this._requestQueue = [];
-    }
-
-    public setReportMetrics(reportMetrics: boolean) {
-        this._reportMetrics = reportMetrics;
+        return Promise.resolve();
     }

-    public report(request: MetricsRequest) {
-        if (!this._reportMetrics) {
-            return;
-        }
-
-        if (this._batch === undefined) {
-            void this.makeRequest([request]).catch(() => {});
-            return;
-        }
+    public clearQueue() {}

-        if (this._intervalId === null) {
-            this.startBatchingProcess();
-        }
+    public setReportMetrics(reportMetrics: boolean) {}

-        this._requestQueue.push(request);
-    }
+    public report(request: MetricsRequest) {}

     private async processNextBatch() {
         if (this._batch === undefined) {

diff --git a/packages/shared/lib/helpers/metrics.ts b/packages/shared/lib/helpers/metrics.ts
index a02281be7d..7ea1abec03 100644
--- a/packages/shared/lib/helpers/metrics.ts
+++ b/packages/shared/lib/helpers/metrics.ts
@@ -1,22 +1,12 @@
-import { type Subscription, isFreeSubscription } from '@proton/payments';
-import { getIsB2BAudienceFromSubscription, getPlanName } from '@proton/payments';
-import { getSilentApi } from '@proton/shared/lib/api/helpers/customConfig';
+import { type Subscription } from '@proton/payments';
 import type { UserModel, UserSettings } from '@proton/shared/lib/interfaces';
 
-import { metrics } from '../api/metrics';
 import type { TelemetryReport } from '../api/telemetry';
-import { sendMultipleTelemetryData, sendTelemetryData } from '../api/telemetry';
 import type { METRICS_LOG } from '../constants';
 import { SECOND } from '../constants';
 import type { Api } from '../interfaces';
-import { getAccountAgeForDimension } from './metrics.helpers';
 import { wait } from './promise';
 
-// Make the metrics false by default to avoid (rare) cases where we could have sendMetricReport or sendTelemetryReport
-// before setting this metricsEnabled value with the user setting.
-// In that scenario we would send something but the user might not want this.
-let metricsEnabled = false;
-
 /**
  * Delay an operation by a random number of seconds between 1 second and the specified
  * number of seconds. If none is provided, the default is 180 seconds, i.e. 3 minutes
@@ -28,17 +18,7 @@ export const randomDelay = async (delayInSeconds: number = 180) => {
 /**
  * Send metrics report (/metrics endpoint)
  */
-export const sendMetricsReport = async (api: Api, Log: METRICS_LOG, Title?: string, Data?: any) => {
-    if (!metricsEnabled) {
-        return;
-    }
-    // We delay sending the metrics report because this helper is used in some privacy-sensitive
-    // use-cases, e.g. encrypted search, in which we don't want the server to be able to use the
-    // metric report as a distinguisher to correlate user actions, e.g. performing an encrypted
-    // search and fetching an email shortly after
-    await randomDelay();
-    void api(metrics({ Log, Title, Data }));
-};
+export const sendMetricsReport = async (api: Api, Log: METRICS_LOG, Title?: string, Data?: any) => { };
 
 interface SendTelemetryReportArgs extends TelemetryReport {
     api: Api;
@@ -62,34 +42,7 @@ export const sendTelemetryReport = async ({
     dimensions,
     silence = true,
     delay,
-}: SendTelemetryReportArgs) => {
-    const possiblySilentApi = silence ? getSilentApi(api) : api;
-
-    if (!metricsEnabled) {
-        return;
-    }
-
-    try {
-        if (delay) {
-            // We delay sending the metrics report because this helper is used in some privacy-sensitive
-            // use-cases, e.g. encrypted search, in which we don't want the server to be able to use the
-            // metric report as a distinguisher to correlate user actions, e.g. performing an encrypted
-            // search and fetching an email shortly after
-            await randomDelay();
-        }
-
-        void (await possiblySilentApi(
-            sendTelemetryData({
-                MeasurementGroup: measurementGroup,
-                Event: event,
-                Values: values,
-                Dimensions: dimensions,
-            })
-        ));
-    } catch {
-        // fail silently
-    }
-};
+}: SendTelemetryReportArgs) => { };
 
 interface SendTelemetryReportWithBaseDimensionArgs extends SendTelemetryReportArgs {
     api: Api;
@@ -118,34 +71,7 @@ export const sendTelemetryReportWithBaseDimensions = async ({
     dimensions,
     delay,
     silence = true,
-}: SendTelemetryReportWithBaseDimensionArgs) => {
-    const subscriptionName = isFreeSubscription(subscription) ? 'free' : getPlanName(subscription);
-
-    let audience = 'free';
-    if (getIsB2BAudienceFromSubscription(subscription)) {
-        audience = 'b2b';
-    } else if (!user.isFree) {
-        audience = 'b2c';
-    }
-
-    void sendTelemetryReport({
-        api,
-        measurementGroup,
-        event,
-        values,
-        silence,
-        dimensions: {
-            ...dimensions,
-            // Base dimensions used to help get basic knowledge about the user
-            accountAge: getAccountAgeForDimension(user),
-            userLocale: userSettings?.Locale ?? 'undefined',
-            subscription: String(subscriptionName),
-            audience,
-            isFree: subscriptionName === 'free' ? 'true' : 'false',
-        },
-        delay,
-    });
-};
+}: SendTelemetryReportWithBaseDimensionArgs) => { };
 
 interface SendMultipleTelemetryReportsArgs {
     api: Api;
@@ -160,20 +86,8 @@ export const sendMultipleTelemetryReports = async ({
     api,
     reports,
     silence = true,
-}: SendMultipleTelemetryReportsArgs) => {
-    const possiblySilentApi = silence ? getSilentApi(api) : api;
-
-    if (!metricsEnabled) {
-        return;
-    }
-
-    try {
-        void (await possiblySilentApi(sendMultipleTelemetryData({ reports })));
-    } catch {
-        // fail silently
-    }
-};
+}: SendMultipleTelemetryReportsArgs) => { };
 
 export const setMetricsEnabled = (enabled: boolean) => {
-    metricsEnabled = enabled;
+    // metricsEnabled = enabled;
 };
--
