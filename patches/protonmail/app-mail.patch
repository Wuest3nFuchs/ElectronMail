diff --git a/package.json b/package.json
index 0195dc8bea..a16225db6d 100644
--- a/package.json
+++ b/package.json
@@ -3,13 +3,9 @@
     "private": true,
     "license": "GPL-3.0",
     "workspaces": [
-        "applications/*",
-        "applications/pass-desktop/native",
+        "applications/mail",
         "packages/*",
         "packages/wasm/*",
-        "tests",
-        "tests/mail-renderer",
-        "tests/packages/*",
         "utilities/*",
         "vendor/*/*"
     ],
--

diff --git a/applications/mail/package.json b/applications/mail/package.json
index ef88d8efca..ab2bdb4af4 100644
--- a/applications/mail/package.json
+++ b/applications/mail/package.json
@@ -7,7 +7,6 @@
     "main": "index.js",
     "scripts": {
         "analyze": "yarn build:web --analyze",
-        "build:web": "cross-env NODE_ENV=production TS_NODE_PROJECT=\"../../tsconfig.webpack.json\" proton-pack build --configV2 --webpackOnCaffeine --appMode=sso --logical",
         "check-types": "tsc",
         "i18n:extract:web": "proton-i18n extract",
         "i18n:getlatest": "proton-i18n upgrade",
@@ -101,4 +100,4 @@
         "typescript": "^5.8.3",
         "workbox-webpack-plugin": "^7.3.0"
     }
-}
+}
\ No newline at end of file
--

diff --git a/applications/mail/src/app/index.tsx b/applications/mail/src/app/index.tsx
index b4d841c7cd..96d2b5c9b4 100644
--- a/applications/mail/src/app/index.tsx
+++ b/applications/mail/src/app/index.tsx
@@ -6,6 +6,8 @@ import App from './App';
 import { initializePerformanceMetrics } from './helpers/metrics/initializePerformanceMetrics';
 import './style';

+window.sessionStorage.setItem("electron_mail:proton_app_name", "proton-mail");
+
 initializePerformanceMetrics();

 const container = document.querySelector('.app-root');

diff --git a/applications/mail/webpack.config.ts b/applications/mail/webpack.config.ts
index c9a568c6ae..a315671a21 100644
--- a/applications/mail/webpack.config.ts
+++ b/applications/mail/webpack.config.ts
@@ -48,14 +48,6 @@ const result = (opts: WebpackEnvArgumentsV2): Configuration => {
         );
         // }
 
-        // The order is important so that the unsupported file is loaded after
-        config.entry = mergeEntry(config.entry, {
-            ['eo-index']: [path.resolve('./src/app/eo.tsx'), getSupportedEntry()],
-        });
-
-        // @ts-ignore
-        config.devServer.historyApiFallback.rewrites = [{ from: /^\/eo/, to: '/eo.html' }];
-
         const htmlPlugin = config.plugins.find((plugin): plugin is HtmlWebpackPlugin => {
             return plugin instanceof HtmlWebpackPlugin;
         });
@@ -82,19 +74,6 @@ const result = (opts: WebpackEnvArgumentsV2): Configuration => {
                 inject: 'body',
             })
         );
-        // Add another webpack plugin on top
-        config.plugins.splice(
-            htmlIndex,
-            0,
-            new HtmlWebpackPlugin({
-                filename: 'eo.html',
-                template: path.resolve('./src/eo.ejs'),
-                templateParameters: htmlPlugin.userOptions.templateParameters,
-                scriptLoading: 'defer',
-                chunks: getIndexChunks('eo-index'),
-                inject: 'body',
-            })
-        );
 
         config.experiments = { asyncWebAssembly: true };
     });

diff --git a/packages/shared/lib/api/auth.ts b/packages/shared/lib/api/auth.ts
index efbf28b89f..432f24b303 100644
--- a/packages/shared/lib/api/auth.ts
+++ b/packages/shared/lib/api/auth.ts
@@ -17,7 +17,7 @@ export const auth = (
     persistent: boolean
 ) => ({
     method: 'post',
-    url: 'core/v4/auth',
+    url: 'core/v4/auth', // url used by "patchAuthRequestHeaders" in src/electron-main/util/proton-url.ts
     data: {
         ...data,
         PersistentCookies: Number(persistent),

diff --git a/packages/shared/lib/api/events.ts b/packages/shared/lib/api/events.ts
index 200c255f73..64f8e26c9a 100644
--- a/packages/shared/lib/api/events.ts
+++ b/packages/shared/lib/api/events.ts
@@ -10,7 +10,7 @@ export const getEvents = (
         MessageCounts: 1 | 0;
     }
 ) => ({
-    url: `core/v5/events/${eventID}`,
+    url: `core/v5/events/${eventID}`, // url used by "buildEventsApiUrlTester" in src/electron-preload/webview/primary/provider-api/index.ts
     method: 'get',
     params,
 });

diff --git a/packages/mail/store/messages/messagesTypes.ts b/packages/mail/store/messages/messagesTypes.ts
index 409ff52c4c..f8ea946a6a 100644
--- a/packages/mail/store/messages/messagesTypes.ts
+++ b/packages/mail/store/messages/messagesTypes.ts
@@ -20,12 +20,12 @@ export interface OutsideKey {
 
 export interface PublicPrivateKey {
     type: 'publicPrivate';
-    decryptionKeys: PrivateKeyReference[];
+    /*<electron-mail-mark>*/decryptionKeys: PrivateKeyReference[];/*</electron-mail-mark>*/
     encryptionKey: PrimaryAddressKeyForEncryption;
     signingKeys: PrimaryAddressKeysForSigning;
 }
 
-export type MessageKeys = PublicPrivateKey | OutsideKey;
+/*<electron-mail-mark>*/export type MessageKeys = PublicPrivateKey | OutsideKey;/*</electron-mail-mark>*/
 
 export interface MessageErrors {
     network?: Error[];
@@ -101,7 +101,7 @@ export interface MessageVerification {
     /**
      * Verifying keys, if any
      */
-    verifyingKeys: PublicKeyReference[] | undefined;
+    /*<electron-mail-mark>*/verifyingKeys: PublicKeyReference[] | undefined;/*</electron-mail-mark>*/
 }
 
 export interface AbstractMessageImage {
--

diff --git a/packages/shared/lib/api/messages.ts b/packages/shared/lib/api/messages.ts
index 6d76b8f635..d541b5b7d6 100644
--- a/packages/shared/lib/api/messages.ts
+++ b/packages/shared/lib/api/messages.ts
@@ -43,7 +43,7 @@ export const queryMessageMetadata = ({
     NewsletterSubscriptionID,
 }: MailboxItemsQueryParams) => ({
     method: 'get',
-    url: 'mail/v4/messages',
+    url: 'mail/v4/messages', // url used by "patchMailApiRequestHeaders" in src/electron-main/util/proton-url.ts
     params: {
         Location,
         Page,
@@ -74,7 +74,7 @@ export const queryMessageMetadata = ({
 
 export const queryMessageCount = (AddressID?: string) => ({
     method: 'get',
-    url: 'mail/v4/messages/count',
+    url: 'mail/v4/messages/count', // url used by "buildMessagesCountApiUrlTester" in src/electron-preload/webview/primary/provider-api/index.ts
     params: { AddressID },
 });
 
diff --git a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
index f3b94f1306..2704038939 100644
--- a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
+++ b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
@@ -105,8 +105,8 @@ const MailboxContainer = ({ labelID: inputLabelID, mailSettings, userSettings, e
     const { selectAll, setSelectAll } = useSelectAll({ labelID: inputLabelID });
     const { setCheckAllRef } = useCheckAllRef();
 
-    const labelDropdownToggleRef = useRef<() => void>(() => {});
-    const moveDropdownToggleRef = useRef<() => void>(() => {});
+    const labelDropdownToggleRef = useRef<() => void>(() => { });
+    const moveDropdownToggleRef = useRef<() => void>(() => { });
 
     const { enableResize, resetWidth, scrollBarWidth, isResizing } = useResizeMessageView(
         mainAreaRef,
@@ -551,6 +551,7 @@ const MailboxContainer = ({ labelID: inputLabelID, mailSettings, userSettings, e
                 tabIndex={-1}
                 className="flex-1 flex flex-column flex-nowrap outline-none"
                 data-testid="mailbox"
+                electron-mail-mailbox-container-component
             >
                 <MailHeader
                     elementID={elementID}

diff --git a/applications/mail/src/app/helpers/attachment/attachmentLoader.ts b/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
index 92c8a131f2..dd3593d6e9 100644
--- a/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
+++ b/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
@@ -55,6 +55,7 @@ export const getRequest = ({ ID = '' }: Attachment = {}, api: Api, messageKeys:
     return api(getAttachment(ID));
 };
 
+/* <electron-mail-mark> 1) track signature/args 2) track "verification" props use ("verifyingKeys" prop only at the moment) */
 export const getDecryptedAttachment = async (
     attachment: Attachment,
     verification: MessageVerification | undefined,
@@ -72,12 +73,12 @@ export const getDecryptedAttachment = async (
                 encryptedBinary,
                 sessionKey,
                 attachment.Signature,
-                verification?.verifyingKeys
+                verification?.verifyingKeys // tracking that only "verifyingKeys" prop is used from "verification"
             );
 
             const verificationStatus = getVerificationStatusFromKeys(
                 decryptedAttachment,
-                verification?.verifyingKeys || []
+                verification?.verifyingKeys || [] // tracking that only "verifyingKeys" prop is used from "verification"
             );
 
             return {
@@ -116,6 +117,7 @@ export const getDecryptedAttachment = async (
         throw newError;
     }
 };
+/* </electron-mail-mark> */
 
 export const getAndVerifyAttachment = async (
     attachment: Attachment = {},

diff --git a/applications/mail/src/app/hooks/contact/useContacts.ts b/applications/mail/src/app/hooks/contact/useContacts.ts
index 18737e3e35..7f542185b7 100644
--- a/applications/mail/src/app/hooks/contact/useContacts.ts
+++ b/applications/mail/src/app/hooks/contact/useContacts.ts
@@ -8,9 +8,11 @@ import {
     recipientsLabelCache,
 } from '../../store/contacts/contactsSelectors';

+/* <electron-mail-mark> */
 export const useContactsMap = () => {
     return useMailSelector(contactsMap);
 };
+/* </electron-mail-mark> */

 export const useContactGroupsMap = () => {
     return useMailSelector(contactGroupsMap);

diff --git a/packages/components/hooks/useGetVerificationPreferences.ts b/packages/components/hooks/useGetVerificationPreferences.ts
index 8698fb0667..dc8a639795 100644
--- a/packages/components/hooks/useGetVerificationPreferences.ts
+++ b/packages/components/hooks/useGetVerificationPreferences.ts
@@ -38,6 +38,7 @@ const useGetVerificationPreferences = () => {
     const getPublicKeysForInbox = useGetPublicKeysForInbox();
     const getMailSettings = useGetMailSettings();

+    /* <electron-mail-mark> 1) track signature/args: email, lifetime, contactEmailsMap 2) "verifyingKeys" gets returned */
     const getVerificationPreferences = useCallback<GetVerificationPreferences>(
         async ({ email, lifetime, contactEmailsMap }) => {
             const addresses = await getAddresses();
@@ -70,7 +71,7 @@ const useGetVerificationPreferences = () => {
                 const verifyingKeys = getVerifyingKeys(activePublicKeys, compromisedFingerprints);
                 return {
                     isOwnAddress: true,
-                    verifyingKeys,
+                    verifyingKeys, // "verifyingKeys" gets returned
                     apiKeys: activePublicKeys,
                     pinnedKeys: [],
                     compromisedFingerprints,
@@ -114,7 +115,7 @@ const useGetVerificationPreferences = () => {
             }
             return {
                 isOwnAddress: false,
-                verifyingKeys,
+                verifyingKeys, // "verifyingKeys" gets returned
                 pinnedKeys,
                 apiKeys: apiPublicKeys,
                 ktVerificationResult,
@@ -126,6 +127,7 @@ const useGetVerificationPreferences = () => {
         },
         [api, getAddressKeys, getAddresses, getPublicKeysForInbox, getMailSettings]
     );
+    /* <electron-mail-mark/> */

     return useCallback<GetVerificationPreferences>(
         ({ email, lifetime = DEFAULT_LIFETIME, contactEmailsMap }) => {

diff --git a/applications/mail/src/app/helpers/message/messageDecrypt.ts b/applications/mail/src/app/helpers/message/messageDecrypt.ts
index 3c994a7fa3..87803c24fa 100644
--- a/applications/mail/src/app/helpers/message/messageDecrypt.ts
+++ b/applications/mail/src/app/helpers/message/messageDecrypt.ts
@@ -25,6 +25,7 @@ const binaryToString = (data: Uint8Array) =>
         // nbsp can be contained in message body and "crash" DOMPurify
         .replace(/\u00A0/g, ' ');

+/* <electron-mail-mark> */
 export interface DecryptMessageResult {
     decryptedBody: string;
     decryptedRawContent: Uint8Array;
@@ -34,6 +35,7 @@ export interface DecryptMessageResult {
     errors?: MessageErrors;
     mimetype?: MIME_TYPES;
 }
+/* </electron-mail-mark> */

 const decryptMimeMessage = async (
     message: Message,
@@ -92,6 +94,7 @@ const decryptMimeMessage = async (
  * Willingly not dealing with public keys and signature verification
  * It will be done separately when public keys will be ready
  */
+/* <electron-mail-mark> */
 export const decryptMessage = async (
     message: Message,
     privateKeys: PrivateKeyReference[],
@@ -132,6 +135,7 @@ export const decryptMessage = async (
         };
     }
 };
+/* </electron-mail-mark> */

 /**
  * Verify the extracted `signature` of a decryption result against its `decryptedRawContent`

diff --git a/applications/mail/src/app/hooks/message/useGetMessageKeys.ts b/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
index 6360a876f1..e0c9287e45 100644
--- a/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
+++ b/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
@@ -7,7 +7,7 @@ import type { Message } from '@proton/shared/lib/interfaces/mail/Message';
 export type GetMessageKeys = (message: Pick<Message, 'AddressID'>) => Promise<PublicPrivateKey>;
 export type UseGetMessageKeys = () => GetMessageKeys;
 
-export const useGetMessageKeys: UseGetMessageKeys = () => {
+export const useGetMessageKeys: UseGetMessageKeys = (/* <electron-mail-mark> signature tracking */) => {
     const getAddressKeysByUsage = useGetAddressKeysByUsage();
 
     return useCallback(

diff --git a/packages/components/hooks/useApi.ts b/packages/components/hooks/useApi.ts
index e2baface5..8b4317d5a 100644
--- a/packages/components/hooks/useApi.ts
+++ b/packages/components/hooks/useApi.ts
@@ -3,8 +3,8 @@ import { Api } from '@proton/shared/lib/interfaces';

 import ContextApi from '../containers/api/apiContext';

-const useApi = (): Api => {
+const useApi = (): Api => { /* <electron-mail-mark> */
     return useContext(ContextApi);
-};
+}; /* </electron-mail-mark> */

 export default useApi;

diff --git a/packages/components/hooks/useAuthentication.ts b/packages/components/hooks/useAuthentication.ts
index 62cc8ee6bf..533ea5d5a1 100644
--- a/packages/components/hooks/useAuthentication.ts
+++ b/packages/components/hooks/useAuthentication.ts
@@ -3,9 +3,9 @@ import { useContext } from 'react';
 import type { PrivateAuthenticationStore } from '../containers/app/interface';
 import AuthenticationContext from '../containers/authentication/authenticationContext';

-const useAuthentication = () => {
+const useAuthentication = () => { /* <electron-mail-mark> */
     // Force private authentication store because the public app is a special case
     return useContext(AuthenticationContext) as PrivateAuthenticationStore;
-};
+}; /* </electron-mail-mark> */

 export default useAuthentication;

diff --git a/packages/components/components/editor/rooster/hooks/useInitRooster.ts b/packages/components/components/editor/rooster/hooks/useInitRooster.ts
index f092dd0201..f42ecbc0b4 100644
--- a/packages/components/components/editor/rooster/hooks/useInitRooster.ts
+++ b/packages/components/components/editor/rooster/hooks/useInitRooster.ts
@@ -56,7 +56,9 @@ const useInitRooster = ({

     const initRooster = useCallback(async () => {
         const iframe = iframeRef.current as HTMLIFrameElement;
+        /* <electron-mail-mark> */
         const iframeDocument = iframe.contentWindow?.document as Document;
+        /* </electron-mail-mark> */

         /**
          * Disable Dark Reader on the composer iframe to avoid sending censored emails
@@ -125,6 +127,13 @@ const useInitRooster = ({

         onReady(actions);

+        window.dispatchEvent(
+            new CustomEvent(
+                'electron-mail:packages/components/components/editor/rooster/hooks/useInitRooster.ts:useInitRooster:onReady',
+                { detail: { iframeDocument } },
+            ),
+        );
+
         return editor;
     }, []);

diff --git a/packages/components/hooks/useCache.ts b/packages/components/hooks/useCache.ts
index 35d7a0aba..352f1c8a3 100644
--- a/packages/components/hooks/useCache.ts
+++ b/packages/components/hooks/useCache.ts
@@ -3,7 +3,7 @@ import { useContext } from 'react';

 import Context from '../containers/cache/cacheContext';

-const useCache = <K = string, V = any>() => {
+const useCache = <K = string, V = any>() => { /* <electron-mail-mark> */
     const cache = useContext(Context);

     if (!cache) {
@@ -11,6 +11,6 @@ const useCache = <K = string, V = any>() => {
     }

     return cache as Cache<K, V>;
-};
+}; /* </electron-mail-mark> */

 export default useCache;

diff --git a/applications/mail/src/app/helpers/url.ts b/applications/mail/src/app/helpers/url.ts
index 2aaa779d3..487f54ff3 100644
--- a/applications/mail/src/app/helpers/url.ts
+++ b/applications/mail/src/app/helpers/url.ts
@@ -91,16 +91,5 @@ export const mailtoParser = (mailto: string): PartialMessageState => {
 };

 export const registerMailToProtocolHandler = () => {
-    if ('registerProtocolHandler' in navigator) {
-        try {
-            navigator.registerProtocolHandler(
-                'mailto',
-                `${window.location.origin}${MAILTO_PROTOCOL_HANDLER_PATH}`,
-                // @ts-expect-error third arg is still recommended (cf. https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler)
-                'ProtonMail'
-            );
-        } catch (e: any) {
-            console.error(e);
-        }
-    }
+    // NOOP
 };

diff --git a/applications/mail/src/app/components/drawer/MailQuickSettings.tsx b/applications/mail/src/app/components/drawer/MailQuickSettings.tsx
index ed5c2eb6bb..5b49a0d4d6 100644
--- a/applications/mail/src/app/components/drawer/MailQuickSettings.tsx
+++ b/applications/mail/src/app/components/drawer/MailQuickSettings.tsx
@@ -60,7 +60,6 @@ import { useCanReplayOnboarding } from 'proton-mail/hooks/useCanReplayOnboarding
 import useMailModel from 'proton-mail/hooks/useMailModel';
 
 import ClearBrowserDataModal from '../header/ClearBrowserDataModal';
-import MailDefaultHandlerModal from '../header/MailDefaultHandlerModal';
 
 const { OFF, UNSET, SERVER_ONLY } = AI_ASSISTANT_ACCESS;
 
@@ -178,12 +177,12 @@ const MailQuickSettings = () => {
     const mailReminders: QuickSettingsReminders[] = useMemo(() => {
         const ktReminder: QuickSettingsReminders | undefined = showKT
             ? {
-                  color: keyTransparencyNotification,
-                  icon: keyTransparencyNotification ? 'exclamation-circle-filled' : undefined,
-                  text: c('loc_nightly: Key transparency details').t`Key verification`,
-                  callback: handleShowKeyTransparencyModal,
-                  testID: 'key-verification',
-              }
+                color: keyTransparencyNotification,
+                icon: keyTransparencyNotification ? 'exclamation-circle-filled' : undefined,
+                text: c('loc_nightly: Key transparency details').t`Key verification`,
+                callback: handleShowKeyTransparencyModal,
+                testID: 'key-verification',
+            }
             : undefined;
 
         return [ktReminder].filter(isTruthy);
@@ -433,7 +432,6 @@ const MailQuickSettings = () => {
             </QuickSettingsButtonSection>
 
             {ElectronDefaultAppPrompt}
-            <MailDefaultHandlerModal {...mailDefaultHandlerProps} />
             <ClearBrowserDataModal {...clearBrowserDataProps} />
             <MailShortcutsModal {...mailShortcutsProps} />
             <KeyTransparencyDetailsModal {...keyTransparencyDetailsModalProps} />

diff --git a/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx b/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx
deleted file mode 100644
index 0314390d7b..0000000000
--- a/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx
+++ /dev/null
@@ -1,42 +0,0 @@
-import { c } from 'ttag';
-
-import { Button, Href } from '@proton/atoms';
-import type { ModalProps } from '@proton/components';
-import { Prompt } from '@proton/components';
-import { MAIL_APP_NAME } from '@proton/shared/lib/constants';
-import { getKnowledgeBaseUrl } from '@proton/shared/lib/helpers/url';
-
-import { registerMailToProtocolHandler } from '../../helpers/url';
-
-const MailDefaultHandlerModal = (props: ModalProps) => {
-    const { onClose } = props;
-
-    const handleAskForPermission = () => {
-        registerMailToProtocolHandler();
-
-        onClose?.();
-    };
-
-    return (
-        <Prompt
-            title={c('Info').t`Default email application`}
-            buttons={[
-                <Button color="norm" onClick={handleAskForPermission}>{c('Action').t`Set as default`}</Button>,
-                <Button onClick={onClose}>{c('Action').t`Cancel`}</Button>,
-            ]}
-            {...props}
-        >
-            <span>{c('Info')
-                .t`Set ${MAIL_APP_NAME} as your default email application for this browser. ${MAIL_APP_NAME} will open automatically when you click an email link.`}</span>
-            <Href
-                className="ml-2"
-                href={getKnowledgeBaseUrl('/set-default-email-handler')}
-                title="Default mail handler"
-            >
-                {c('Info').t`Learn more`}
-            </Href>
-        </Prompt>
-    );
-};
-
-export default MailDefaultHandlerModal;

diff --git a/applications/mail/src/app/components/header/search/MailSearch.tsx b/applications/mail/src/app/components/header/search/MailSearch.tsx
index 549d453cdf..0ab53a557e 100644
--- a/applications/mail/src/app/components/header/search/MailSearch.tsx
+++ b/applications/mail/src/app/components/header/search/MailSearch.tsx
@@ -45,7 +45,7 @@ const MailSearch = ({ labelID, location, columnMode }: Props) => {
     const [, loadingAddresses] = useAddresses();
     const { esStatus, cacheIndexedDB, closeDropdown, esIndexingProgressState } = useEncryptedSearchContext();
     const { dropdownOpened, esEnabled } = esStatus;
-    const showEncryptedSearch = isEncryptedSearchAvailable(user, isESUserInterfaceAvailable);
+    const showEncryptedSearch = false;
     // Show more from inside AdvancedSearch to persist the state when the overlay is closed
     const { state: showMore, toggle: toggleShowMore } = useToggle(false);

diff --git a/packages/encrypted-search/lib/constants.ts b/packages/encrypted-search/lib/constants.ts
index ebdf5ee22..28adf6c62 100644
--- a/packages/encrypted-search/lib/constants.ts
+++ b/packages/encrypted-search/lib/constants.ts
@@ -131,7 +131,7 @@ export const defaultESStatus = {
     isEnablingContentSearch: false,
     isDBLimited: false,
     esEnabled: false,
-    esSupported: true,
+    esSupported: false,
     isRefreshing: false,
     isSearchPartial: false,
     isSearching: false,

diff --git a/applications/mail/src/app/hooks/useMailModel.ts b/applications/mail/src/app/hooks/useMailModel.ts
index ec79fc3b4b..971d04ece1 100644
--- a/applications/mail/src/app/hooks/useMailModel.ts
+++ b/applications/mail/src/app/hooks/useMailModel.ts
@@ -1,6 +1,6 @@
 import { useMailSettings } from '@proton/mail/store/mailSettings/hooks';
 
-type MailModel = 'MailSettings';
+type MailModel = 'MailSettings'; // tracking "MailSettings" constant
 
 const useMailModel = (key: MailModel) => {
     const [mailSettings] = useMailSettings();

diff --git a/packages/shared/lib/interfaces/MailSettings.ts b/packages/shared/lib/interfaces/MailSettings.ts
index d7d70c1d0c..565a2601aa 100644
--- a/packages/shared/lib/interfaces/MailSettings.ts
+++ b/packages/shared/lib/interfaces/MailSettings.ts
@@ -50,7 +50,7 @@ export interface MailSettings {
     ComposerMode: COMPOSER_MODE;
     MessageButtons: MESSAGE_BUTTONS;
     ShowMoved: number;
-    ViewMode: VIEW_MODE;
+    ViewMode: VIEW_MODE; // track "ViewMode" prop
     ViewLayout: VIEW_LAYOUT;
     SwipeLeft: SWIPE_ACTION; // default 3
     SwipeRight: SWIPE_ACTION; // default 0

diff --git a/applications/mail/src/app/components/assistant/AssistantIframe.tsx b/applications/mail/src/app/components/assistant/AssistantIframe.tsx
index 5a68c1fd67..2f392dea49 100644
--- a/applications/mail/src/app/components/assistant/AssistantIframe.tsx
+++ b/applications/mail/src/app/components/assistant/AssistantIframe.tsx
@@ -1,23 +1,5 @@
-import { c } from 'ttag';
-
-import { getAssistantIframeURL, useAssistant } from '@proton/llm/lib';
-
 const AssistantIframe = () => {
-    const { canShowAssistant } = useAssistant();
-
-    if (!canShowAssistant) {
-        return null;
-    }
-
-    return (
-        <iframe
-            className="hidden"
-            id="assistant-iframe"
-            title={c('Info').t`writing assistant iframe`}
-            src={getAssistantIframeURL()}
-            tabIndex={-1}
-        />
-    );
+    return null;
 };
 
 export default AssistantIframe;
--
