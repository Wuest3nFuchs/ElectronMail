diff --git a/dist/commonjs/url-search-params.d.ts b/dist/commonjs/url-search-params.d.ts
index a1e8be1830e9549e3c9e53b53a586b491d4d2c30..c7da3a6f8c320ed486c6e156123a1edf3f935bed 100644
--- a/dist/commonjs/url-search-params.d.ts
+++ b/dist/commonjs/url-search-params.d.ts
@@ -4,14 +4,14 @@ export default class SearchParams implements IURLSearchParams {
     params: [string, string][];
     isEncoded: boolean;
     constructor(init?: string | [string, string][] | Record<string, string>);
-    entries(): URLSearchParamsIterator<[string, string]>;
+    entries(): import("url").URLSearchParamsIterator<[string, string]>;
     append(name: string, value: string): void;
     delete(name: string): void;
     forEach(callback: (value: string, name: string, searchParams: this) => void): void;
     get(name: string): string | null;
     getAll(name: string): string[];
     has(name: string): boolean;
-    keys(): URLSearchParamsIterator<string>;
+    keys(): import("url").URLSearchParamsIterator<string>;
     /**
      * The set() method of the URLSearchParams interface sets the value associated with a given
      * search parameter to the given value. If there were several matching values, this method
@@ -22,8 +22,8 @@ export default class SearchParams implements IURLSearchParams {
     set(name: string, value: string): void;
     sort(): void;
     toString(): string;
-    values(): URLSearchParamsIterator<string>;
-    [Symbol.iterator](): URLSearchParamsIterator<[string, string]>;
+    values(): import("url").URLSearchParamsIterator<string>;
+    [Symbol.iterator](): import("url").URLSearchParamsIterator<[string, string]>;
     get size(): number;
 }
 export declare function extractParams(urlString: string, start: number, end: number, params: SearchParams, separators: number[], equals: number, breakCodes: number[], { encode }?: {
